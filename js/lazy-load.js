/* ========================================
   ÂõæÁâáÊáíÂä†ËΩΩ‰∏é‰ºòÂåñ
   ÊèêÂçáÈ°µÈù¢ÊÄßËÉΩ
   ======================================== */

class LazyImageLoader {
    constructor(options = {}) {
        this.options = {
            threshold: options.threshold || 0.1,
            rootMargin: options.rootMargin || '50px',
            loadingClass: options.loadingClass || 'lazy-loading',
            loadedClass: options.loadedClass || 'lazy-loaded',
            errorClass: options.errorClass || 'lazy-error',
            placeholderColor: options.placeholderColor || '#e2e8f0'
        };
        
        this.observer = null;
        this.images = [];
        this.init();
    }
    
    init() {
        // Ê£ÄÊü•ÊµèËßàÂô®ÊîØÊåÅ
        if ('IntersectionObserver' in window) {
            this.setupIntersectionObserver();
        } else {
            // ÈôçÁ∫ßÊñπÊ°àÔºöÁõ¥Êé•Âä†ËΩΩÊâÄÊúâÂõæÁâá
            this.loadAllImages();
        }
        
        // ÁõëÂê¨Êñ∞Â¢ûÂõæÁâá
        this.observeDOM();
    }
    
    setupIntersectionObserver() {
        this.observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    this.loadImage(entry.target);
                    this.observer.unobserve(entry.target);
                }
            });
        }, {
            threshold: this.options.threshold,
            rootMargin: this.options.rootMargin
        });
        
        this.registerImages();
    }
    
    registerImages() {
        // Êü•ÊâæÊâÄÊúâÈúÄË¶ÅÊáíÂä†ËΩΩÁöÑÂõæÁâá
        const lazyImages = document.querySelectorAll('img[loading="lazy"], img[data-src]');
        
        lazyImages.forEach(img => {
            if (!this.images.includes(img)) {
                this.images.push(img);
                
                // Ê∑ªÂä†Âä†ËΩΩ‰∏≠Ê†∑Âºè
                img.classList.add(this.options.loadingClass);
                
                // Ê∑ªÂä†Âç†‰ΩçËÉåÊôØ
                if (!img.style.backgroundColor) {
                    img.style.backgroundColor = this.options.placeholderColor;
                }
                
                // ËßÇÂØüÂõæÁâá
                if (this.observer) {
                    this.observer.observe(img);
                }
            }
        });
    }
    
    loadImage(img) {
        const src = img.dataset.src || img.src;
        
        if (!src) return;
        
        // ÂàõÂª∫Êñ∞ÂõæÁâáÂØπË±°Áî®‰∫éÈ¢ÑÂä†ËΩΩ
        const tempImage = new Image();
        
        tempImage.onload = () => {
            img.src = src;
            img.classList.remove(this.options.loadingClass);
            img.classList.add(this.options.loadedClass);
            img.style.backgroundColor = 'transparent';
            
            // Ëß¶ÂèëËá™ÂÆö‰πâ‰∫ã‰ª∂
            img.dispatchEvent(new CustomEvent('lazyloaded', {
                detail: { src }
            }));
            
            console.log(`‚úÖ Image loaded: ${src}`);
        };
        
        tempImage.onerror = () => {
            img.classList.remove(this.options.loadingClass);
            img.classList.add(this.options.errorClass);
            
            console.error(`‚ùå Failed to load image: ${src}`);
            
            // ÊòæÁ§∫ÈîôËØØÂç†‰ΩçÁ¨¶
            this.showErrorPlaceholder(img);
        };
        
        tempImage.src = src;
    }
    
    loadAllImages() {
        const images = document.querySelectorAll('img[loading="lazy"], img[data-src]');
        images.forEach(img => this.loadImage(img));
    }
    
    showErrorPlaceholder(img) {
        // ÂàõÂª∫ÈîôËØØÂç†‰ΩçÁ¨¶
        const placeholder = document.createElement('div');
        placeholder.style.cssText = `
            display: flex;
            align-items: center;
            justify-content: center;
            width: ${img.width || 200}px;
            height: ${img.height || 200}px;
            background: linear-gradient(135deg, #f5f5f5 0%, #e0e0e0 100%);
            color: #999;
            font-size: 3em;
            border-radius: 8px;
        `;
        placeholder.innerHTML = 'üñºÔ∏è';
        
        img.parentNode.replaceChild(placeholder, img);
    }
    
    observeDOM() {
        // ÁõëÂê¨ DOM ÂèòÂåñÔºåËá™Âä®Ê≥®ÂÜåÊñ∞ÂõæÁâá
        if ('MutationObserver' in window) {
            const observer = new MutationObserver(() => {
                this.registerImages();
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        }
    }
    
    destroy() {
        if (this.observer) {
            this.observer.disconnect();
        }
        this.images = [];
    }
}

// ===== CSS Ê†∑Âºè =====
const lazyStyles = `
    .lazy-loading {
        filter: blur(5px);
        opacity: 0.6;
        transition: filter 0.3s ease, opacity 0.3s ease;
    }
    
    .lazy-loaded {
        filter: blur(0);
        opacity: 1;
        animation: fadeIn 0.3s ease-in;
    }
    
    .lazy-error {
        opacity: 0.3;
        filter: grayscale(100%);
    }
    
    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: scale(0.95);
        }
        to {
            opacity: 1;
            transform: scale(1);
        }
    }
    
    /* ÂìçÂ∫îÂºèÂõæÁâá‰ºòÂåñ */
    img {
        max-width: 100%;
        height: auto;
        display: block;
    }
    
    /* Ê∏êËøõÂºèÂõæÁâáÂä†ËΩΩÊïàÊûú */
    img[loading="lazy"]:not(.lazy-loaded) {
        background: linear-gradient(
            90deg,
            #f0f0f0 0%,
            #e0e0e0 50%,
            #f0f0f0 100%
        );
        background-size: 200% 100%;
        animation: shimmer 1.5s infinite;
    }
    
    @keyframes shimmer {
        0% { background-position: 200% 0; }
        100% { background-position: -200% 0; }
    }
`;

// Ê≥®ÂÖ•Ê†∑Âºè
function injectLazyStyles() {
    const style = document.createElement('style');
    style.textContent = lazyStyles;
    document.head.appendChild(style);
}

// ===== ÂàùÂßãÂåñ =====
let lazyLoader;

document.addEventListener('DOMContentLoaded', () => {
    injectLazyStyles();
    lazyLoader = new LazyImageLoader({
        threshold: 0.1,
        rootMargin: '50px'
    });
    
    console.log('üñºÔ∏è Lazy Image Loader initialized');
});

// ===== ÂØºÂá∫ =====
window.LazyImageLoader = LazyImageLoader;
window.lazyLoader = lazyLoader;
